//Generated by GuiGenie - Copyright (c) 2004 Mario Awad.
//Home Page http://guigenie.cjb.net - Check often for new versions!

import java.awt.*;
import java.awt.event.*;
import java.awt.geom.RoundRectangle2D;
import java.sql.ResultSet;
import java.text.DateFormat;
import java.time.LocalDateTime;
import java.time.format.DateTimeFormatter;
import java.util.Date;
import javax.annotation.processing.RoundEnvironment;
import javax.swing.*;
import javax.swing.border.BevelBorder;
import javax.swing.border.MatteBorder;

public class front extends JPanel implements ItemListener, ActionListener {
    private final JButton numpad1;
    private final JButton numpad2;
    private final JButton numpad3;
    private final JButton numpad4;
    private final JButton numpad5;
    private final JButton numpad6;
    private final JButton numpad7;
    private final JButton numpad8;
    private final JButton numpad9;
    private final JButton numpad0;
    private final JButton cancel;
    private final JButton clear;
    private final JButton enter;
    private static  JLabel date_time;


    private final JButton account_detail;

    private final JButton deposit;

    private final JButton mini_stat;
    private final JButton withdraw;
    private final JButton continue_session;
    private final JPasswordField pinTextBox;

    private final JTextArea display;

    private final JRadioButton insert;
    private final JButton new_pin;

    private  String user_id,user_pin;
    String bank="\n   AXIS BANK ATM";
    String option= bank+"    \n\n\n\n\n\n" +
                   "    DEPOSIT\t\t                     \tBALANCE\n" +
                   "\n" +
                   "\n" +
                   "\n\n\n" +
                   "    NEW PIN\t\t                 MINI STATEMENT\n" +
                   "\n" +
                   "\n" +
                   "\n\n\n" +
                   "    WITHDRAW\t\t                     \tDETAILS";
    String policy="\n\n\n       *)Get 5% interest on Home Loan \n       *)NEW POLICIES FOR STUDENTS AND OLD AGE PEOPLES\n\n\n\tGRAB THE OPPORTUNITY NOW  ";
    String proc=bank+"\n\n\n\n\n\n                              CARD IS UNDER PROCESS\n                              (Don't remove until told)\n"+policy;
    String start= bank+"       \n\n\n\n\n" +
                  "\n" +
                  "\n\n\n" +
                  "                           WELCOME  TO AXIS  BANK\n\n\n"+policy;

    String pin=bank+"\n\n\n\n\n\t                INSERT PIN\n\n\n"+policy;

    String null_enter=bank+"\n\n\n\n\n\n                             PLEASE ENTER INPUT\n\n"+policy;

    String pin_error= bank+
                      "\n\n\n\n" +
                      "\n" +
                      "\n\n" +
                      "                                    WRONG INPUT\n" +
                      "                             You can remove your card\n\n"+policy;
    String dis_amount=bank+"\n\n\n\n\n\n\n                                ENTER THE AMOUNT\n\n";

    String old_pin=bank+"\n\n\n\n\n\n                                 ENTER THE OLD PIN\n\n";
    String newpin=bank+"\n\n\n\n\n\n                                  ENTER THE NEW PIN\n\n";
    String renewpin=bank+"\n\n\n\n\n\n                                RE-ENTER THE NEW PIN\n\n";
    public int count=0,word=0,limit_flag=0,pin_count=0,conti=0;
    public String re;
    public front() {
        Font font = new Font("Consolas", Font.BOLD, 20);
        //construct components
        numpad1 = new JButton ("1");
        numpad2 = new JButton ("2");
        numpad3 = new JButton ("3");
        numpad4 = new JButton ("4");
        numpad5 = new JButton ("5");
        numpad6 = new JButton ("6");
        numpad7 = new JButton ("7");
        numpad8 = new JButton ("8");
        numpad9 = new JButton ("9");
        numpad0 = new JButton ("0");
        cancel = new JButton ("CANCEL");
        clear = new JButton ("CLEAR");
        enter = new JButton ("ENTER");
        date_time = new JLabel();
        continue_session=new JButton("CONTINUE");

        //add components
        add (numpad1);
        add (numpad2);
        add (numpad3);
        add (numpad4);
        add (numpad5);
        add (numpad6);
        add (numpad7);
        add (numpad8);
        add (numpad9);
        add (numpad0);
        add (cancel);
        add (clear);
        add (enter);
        add(date_time);
        add(continue_session);

        //set component bounds (only needed by Absolute Positioning)
        numpad1.setBounds (135, 620, 180, 80);
        numpad1.setFont(font);
        numpad1.setBackground(new Color(0xE9F3F4));
        numpad2.setBounds (325, 620, 180, 80);
        numpad2.setFont(font);
        numpad2.setBackground(new Color(0xE9F3F4));
        numpad3.setBounds (515, 620, 180, 80);
        numpad3.setFont(font);
        numpad3.setBackground(new Color(0xE9F3F4));
        numpad4.setBounds (135, 710, 180, 80);
        numpad4.setFont(font);
        numpad4.setBackground(new Color(0xE9F3F4));
        numpad5.setBounds (325, 710, 180, 80);
        numpad5.setFont(font);
        numpad5.setBackground(new Color(0xE9F3F4));
        numpad6.setBounds (515, 710, 180, 80);
        numpad6.setFont(font);
        numpad6.setBackground(new Color(0xE9F3F4));
        numpad7.setBounds (135, 800, 180, 80);
        numpad7.setFont(font);
        numpad7.setBackground(new Color(0xE9F3F4));
        numpad8.setBounds (325, 800, 180, 80);
        numpad8.setFont(font);
        numpad8.setBackground(new Color(0xE9F3F4));
        numpad9.setBounds (515, 800, 180, 80);
        numpad9.setFont(font);
        numpad9.setBackground(new Color(0xE9F3F4));
        numpad0.setBounds (325, 890, 180, 80);
        numpad0.setFont(font);
        numpad0.setBackground(new Color(0xE9F3F4));
        cancel.setBounds (705, 620, 180, 80);
        cancel.setFont(font);
        cancel.setBackground(new Color(0xE9F3F4));
        clear.setBounds (705, 710, 180, 80);
        clear.setFont(font);
        clear.setBackground(new Color(0xE9F3F4));
        enter.setBounds (705, 800, 180, 80);
        enter.setFont(font);
        enter.setBackground(new Color(0xE9F3F4));
        date_time.setBounds (530, 35, 305, 50);
        date_time.setFont(font);
        continue_session.setBounds(515,890,360,80);
        continue_session.setBackground(new Color(0xE9F3F4));
        continue_session.setFont(font);

//        -------------------------------------------------------------

        deposit = new JButton();
        new_pin = new JButton();
        withdraw = new JButton();
        JButton balance = new JButton();
        mini_stat = new JButton();
        account_detail = new JButton();
        display = new JTextArea();
        pinTextBox=new JPasswordField();
        insert = new JRadioButton("CARD STATUS");

        //adjust size and set layout
        setPreferredSize (new Dimension (1000, 1000));
        setLayout (null);

        //add components
        add (deposit);
        add (new_pin);
        add (withdraw);
        add (balance);
        add (mini_stat);
        add (account_detail);
        add(display);
        add(pinTextBox);
        add(insert);

        //set component bounds (only needed by Absolute Positioning)
        deposit.setBounds (9, 150, 140, 100);
        deposit.setText(">>");
        deposit.setHorizontalAlignment(JTextField.CENTER);
        deposit.setBackground(new Color(0xE9F3F4));
        deposit.setFont(font);
        
        new_pin.setBounds (9, 290, 140, 100);
        new_pin.setText(">>");
        new_pin.setHorizontalAlignment(JTextField.CENTER);
        new_pin.setBackground(new Color(0xE9F3F4));
        new_pin.setFont(font);
        
        withdraw.setBounds (9, 430, 140, 100);
        withdraw.setText(">>");
        withdraw.setHorizontalAlignment(JTextField.CENTER);
        withdraw.setBackground(new Color(0xE9F3F4));
        withdraw.setFont(font);

        balance.setBounds (851, 150, 140, 100);
        balance.setText("<<");
        balance.setHorizontalAlignment(JTextField.CENTER);
        balance.setBackground(new Color(0xE9F3F4));
        balance.setFont(font);

        mini_stat.setBounds (851, 290, 140, 100);
        mini_stat.setText("<<");
        mini_stat.setHorizontalAlignment(JTextField.CENTER);
        mini_stat.setBackground(new Color(0xE9F3F4));
        mini_stat.setFont(font);

        account_detail.setBounds (851, 430, 140, 100);
        account_detail.setText("<<");
        account_detail.setHorizontalAlignment(JTextField.CENTER);
        account_detail.setBackground(new Color(0xE9F3F4));
        account_detail.setFont(font);

        display.setBounds(150,20,700,580);
        display.setText(start);
        display.setEditable(false);
        display.setFont(font);
        display.setBorder(BorderFactory.createStrokeBorder(new BasicStroke((float) 5.0f)));
        display.setBackground(new Color(0xF3F3F3));


        pinTextBox.setBounds(300, 510, 410, 30);
        pinTextBox.setFont(font);
        pinTextBox.setBorder(null);
        pinTextBox.setVisible(false);
        pinTextBox.setEditable(false);
        pinTextBox.setBackground(new Color(0xFFFFFF));
        pinTextBox.setHorizontalAlignment(JTextField.CENTER);


        insert.setLocation(120, 920);
        insert.setSize(200,20);
        insert.setFont(font);
        insert.setBackground(new Color(0xCDCDCD));


        //--------------------------

        insert.addItemListener(this);
        enter.addActionListener(this);
        clear.addActionListener(this);
        cancel.addActionListener(this);
        numpad1.addActionListener(this);
        numpad2.addActionListener(this);
        numpad3.addActionListener(this);
        numpad4.addActionListener(this);
        numpad5.addActionListener(this);
        numpad6.addActionListener(this);
        numpad7.addActionListener(this);
        numpad8.addActionListener(this);
        numpad9.addActionListener(this);
        numpad0.addActionListener(this);
        account_detail.addActionListener(this);
        mini_stat.addActionListener(this);
        deposit.addActionListener(this);
        withdraw.addActionListener(this);
        new_pin.addActionListener(this);
        continue_session.addActionListener(this);

        //---------------------------------------------------

    }
    public static void currdatetime(){
        tickTock();
        Timer timer = new Timer(500, new ActionListener() {
            @Override
            public void actionPerformed(ActionEvent e) {
                tickTock();
            }
        });
        timer.setRepeats(true);
        timer.setCoalesce(true);
        timer.setInitialDelay(0);
        timer.start();

    }
    public static void tickTock() {
        date_time.setText(DateFormat.getDateTimeInstance().format(new Date()));
    }
    public static void main (String[] args) {
        JFrame frame = new JFrame ("MyPanel");
        frame.setResizable(false);
        frame.setDefaultCloseOperation (JFrame.EXIT_ON_CLOSE);
        front fr = new front();
        fr.setBackground(new Color(0xFFFFFF));
        frame.getContentPane().add (fr);
        frame.pack();
        frame.setVisible (true);
        currdatetime();
    }

    @Override
    public void itemStateChanged(ItemEvent e) {
        if(e.getStateChange()== ItemEvent.SELECTED)
        {
            pinTextBox.setVisible(true);
            display.setText(proc);
        }
        else{
            pinTextBox.setVisible(false);
            display.setText(start);
            pinTextBox.setText(null);
            word=0;
            pin_count=0;
            user_pin=null;
            user_id=null;
            limit_flag=0;
            count=0;
        }
    }

    @Override
    public void actionPerformed(ActionEvent e) {
        try {
            if (insert.isSelected()) {
                if ((limit_flag == 0 && word < 12) || (limit_flag == 1 && pin_count < 4)) {
                    if (e.getSource() == numpad1) {

                        pinTextBox.setText(pinTextBox.getText() + "1");
                        word += 1;
                        pin_count += 1;
                    }
                    if (e.getSource() == numpad2) {
                        pinTextBox.setText(pinTextBox.getText() + "2");
                        word += 1;
                        pin_count += 1;
                    }
                    if (e.getSource() == numpad3) {
                        pinTextBox.setText(pinTextBox.getText() + "3");
                        word += 1;
                        pin_count += 1;
                    }
                    if (e.getSource() == numpad4) {
                        pinTextBox.setText(pinTextBox.getText() + "4");
                        word += 1;
                        pin_count += 1;
                    }
                    if (e.getSource() == numpad5) {
                        pinTextBox.setText(pinTextBox.getText() + "5");
                        word += 1;
                        pin_count += 1;
                    }
                    if (e.getSource() == numpad6) {
                        pinTextBox.setText(pinTextBox.getText() + "6");
                        word += 1;
                        pin_count += 1;
                    }
                    if (e.getSource() == numpad7) {
                        pinTextBox.setText(pinTextBox.getText() + "7");
                        word += 1;
                        pin_count += 1;
                    }
                    if (e.getSource() == numpad8) {
                        pinTextBox.setText(pinTextBox.getText() + "8");
                        word += 1;
                        pin_count += 1;
                    }
                    if (e.getSource() == numpad9) {
                        pinTextBox.setText(pinTextBox.getText() + "9");
                        word += 1;
                        pin_count += 1;
                    }
                    if (e.getSource() == numpad0) {
                        pinTextBox.setText(pinTextBox.getText() + "0");
                        word += 1;
                        pin_count += 1;
                    }


                }
            }
            if (e.getSource() == clear) {
                String text = pinTextBox.getText();
                word -= 1;
                pin_count -= 1;
                if (text.length() > 0) {
                    pinTextBox.setText(text.substring(0, text.length() - 1));
                } else {
                    word = 0;
                    pin_count = 0;
                }

            }

            if (e.getSource() == cancel) {
                display.setText(start);
                insert.setSelected(false);
                pinTextBox.setText(null);
                word = 0;
                pin_count = 0;
                user_id = null;
                user_pin = null;
                limit_flag = 0;
                count = 0;
            }

//            ------------------------------------------
            if (e.getSource() == enter) {

                if (pinTextBox.isVisible()) {

                    if (count == 3) {
                        String time = DateFormat.getDateTimeInstance().format(new Date());
                        deposit de = new deposit();
                        if (pinTextBox.getText().equals("")) {
                            display.setText(null_enter);
                        }
                        else {
                        display.setText(bank+de.deposits(user_id, Integer.parseInt(pinTextBox.getText()), time)+policy);}
                        conti=1;
                    } else if (count == 4) {
                        String time = DateFormat.getDateTimeInstance().format(new Date());
                        withdraw wi = new withdraw();
                        if (pinTextBox.getText().equals("")) {
                            display.setText(null_enter);
                        }else{
                        display.setText(bank+wi.wintdrawnmethod(user_id, Integer.parseInt(pinTextBox.getText()), time)+policy);}
                        conti=1;
                    }
                    else if(count==5)
                    {
                        if (pinTextBox.getText().equals("")) {
                            display.setText(null_enter);
                        }
                        else {
                            if (pinTextBox.getText().equals(user_pin)) {
                                display.setText(newpin+policy);
                                pin_count=0;
                                limit_flag=1;
                                pinTextBox.setText(null);
                                pinTextBox.setVisible(true);
                                count=6;
                            }
                            else {
                                display.setText(pin_error);
                                pinTextBox.setVisible(false);
                            }
                        }
                    } else if (count==6) {
                        if (pinTextBox.getText().equals("")) {
                            display.setText(null_enter);
                        }
                        else if(pinTextBox.getText().length()==4) {
                            display.setText(renewpin + policy);
                            pin_count = 0;
                            limit_flag = 1;
                            re = pinTextBox.getText();
                            pinTextBox.setText(null);
                            pinTextBox.setVisible(true);
                            count = 7;
                        }
                        else {
                            display.setText(pin_error);
                            pinTextBox.setVisible(false);
                        }
                    } else if (count==7) {
                        if(pinTextBox.getText().equals(re)){
                            pinchange pc=new pinchange();
                            display.setText(bank+pc.pinchangedm(user_id, Integer.parseInt(re))+policy);
                        }
                    } else {

                        if (pinTextBox.getText().equals("")) {
                            display.setText(null_enter);
                        } else {
                            String a = pinTextBox.getText();
                            if (count == 0) {
                                ResultSet result = connection_mysql.connectToDB("SELECT * FROM DETAIL WHERE ACCOUNT_NO=" + a + ";");
                                assert result != null;
                                result.next();
                                user_id = result.getString(2);
                                user_pin = result.getString(3);


                            }

                            if (a.equals(user_id)) {
                                pinTextBox.setText(null);
                                display.setText(pin);
                                count = 1;
                                limit_flag = 1;
                            } else if (a.equals(user_pin)) {
                                if (count == 1) {
                                    pinTextBox.setVisible(false);
                                    display.setText(option);
                                    count = 0;
                                    limit_flag = 2;
                                }
                            } else {
                                display.setText(pin_error);
                                pinTextBox.setText(null);
                                pinTextBox.setVisible(false);
                            }
                        }

                    }
                }
                word = 0;
                pin_count = 0;
            }



            //--------------------------------------------------------------------

            if(e.getSource()==account_detail && limit_flag==2)
            {
                detail d= new detail();
                display.setText(bank+d.detail_screen(user_id)+policy);
                limit_flag=0;
                conti=1;
            }

            if (e.getSource()==mini_stat && limit_flag==2)
            {
                mini m= new mini();
                display.setText(bank+m.mini_screen(user_id));
                limit_flag=0;
                conti=1;
            }
            if(e.getSource()==deposit && limit_flag==2)
            {

                display.setText(dis_amount+policy);
                pinTextBox.setText(null);
                pinTextBox.setVisible(true);
                word=5;
                limit_flag=0;
                count=3;

            }
            if(e.getSource()==withdraw && limit_flag==2)
            {
                display.setText(dis_amount+policy);
                pinTextBox.setText(null);
                pinTextBox.setVisible(true);
                word=5;
                limit_flag=0;
                count=4;
            }
            if(e.getSource()==new_pin && limit_flag==2)
            {
                display.setText(old_pin+policy);
                pin_count=0;
                limit_flag=1;
                pinTextBox.setText(null);
                pinTextBox.setVisible(true);
                count=5;

            }
            if(e.getSource()==continue_session && conti==1){
                conti=0;
                pinTextBox.setVisible(false);
                display.setText(option);
                limit_flag=2;
                count=0;
                pinTextBox.setText(null);
                word=0;
                pin_count=0;
            }
        }

        catch(Exception f)
        {
            f.printStackTrace();
        }

    }


}


